// Code generated by go-bindata.
// sources:
// resources/AWSWhitelist.json
// resources/DefaultSamplingRules.json
// resources/ExampleSamplingRules.json
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesAwswhitelistJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcd\x72\xe2\x38\x10\xbe\xf3\x14\x2e\x9f\x73\xdb\x5b\x6e\x0c\x49\x28\x6a\xc9\x84\x04\x66\x73\xd8\xda\xa2\x64\xb9\x71\x34\xb1\x25\x47\x3f\x0c\xd4\x56\xde\x7d\x4b\x92\x21\x60\x8c\x2d\xe4\xc0\x90\x64\x0f\x53\x13\xac\xb6\xfa\xeb\xaf\x7f\xd4\x2d\xff\xdb\x09\x82\x50\x00\x9f\x13\x0c\x22\xbc\x0c\xf4\xef\x20\x08\xe3\x25\x45\x19\x8b\xa3\xf5\x93\x20\x08\x59\x0e\x1c\x49\xc2\xa8\xd8\x78\x1a\x04\xe1\x37\x24\xf1\x53\x1f\xe4\x40\x42\xb6\xb5\x12\x04\x21\x87\x17\x05\x42\x4e\x63\x10\x98\x93\x5c\x32\x2e\x4a\x22\x41\x10\x3e\x58\x21\xfd\xfe\xee\x6a\x10\x84\x19\xca\xc3\xcb\x40\x72\x05\x17\xe5\xa5\x04\xe4\xf4\x19\x96\x62\xdf\x3a\x07\x8a\x32\x98\x4a\x16\x5e\x06\xa1\x44\x51\x0a\x53\xfd\x40\x84\x5b\x82\xaf\x1b\xbf\x5e\x2f\xb6\xf1\x8b\x9c\x51\x01\xd3\x1c\x71\x94\x81\x04\x83\xff\xef\x6d\xfc\x3d\x46\x85\xca\x20\xee\xa1\x1c\x61\x22\x97\x9b\x9b\xff\xd3\xa9\xd8\xd8\x52\xf6\xc8\x89\x84\xff\x49\x5b\x91\xb6\x0d\x23\xd4\x86\xf5\x58\x9a\x02\xd6\x21\x77\x0b\x92\x13\x2c\x9a\x99\xed\x71\x40\x12\x26\x1a\xf4\x3e\x5a\xeb\x50\xf5\x53\x16\xa1\x74\x0c\x98\xd1\x18\xf1\xe5\x80\xc6\xb0\x00\x51\xc6\x36\x64\xb8\x59\x68\xc4\xd9\x9c\x08\xc2\x28\xc4\x93\x27\xce\x54\xf2\x94\x2b\x59\x16\x32\x40\xbf\xa3\x0c\x9a\x2d\xbb\x82\x14\xea\xe3\xa5\xce\xb0\x6a\x45\x67\xe3\x36\x6b\x9c\xb7\xdb\x0e\xa2\x51\x27\x55\x74\x12\x5d\x0d\x45\xb1\x89\x67\x22\x24\x50\xf9\x00\x28\xae\x88\xad\x9f\x96\xe1\xeb\x45\xce\x41\xe8\x30\x73\x0b\xad\x53\x54\xb7\x21\x11\xd2\x68\x2f\x17\x26\x27\xcb\xaf\x17\x38\x55\x82\xcc\x61\x2c\x11\x97\x6f\x56\x94\x73\x90\x64\x44\x3a\x98\x56\x5b\x44\xd7\xbb\x57\x96\xd0\x94\x08\x59\x57\x43\x31\x53\x74\xaf\x40\x45\x11\xb5\xf2\xfb\x8b\x68\x25\x99\x23\xe5\x1d\x43\x67\x9e\xf3\xf7\x0a\xf8\xd2\xc7\xae\xae\x94\x9c\x44\x4a\x82\x98\xb0\x3e\xec\xd4\xd4\xfa\xd4\x31\xd5\x7a\x7f\x40\x79\x24\xda\x18\x23\x6a\x76\xbd\x61\xfc\x17\xe2\x3b\x1a\xc7\xa0\x99\x39\x9f\xf4\xd4\x78\x3f\x03\xed\x90\x64\x40\x77\x5e\x6d\x62\xbb\xbc\xc0\xa4\x3e\xca\xcd\x56\xe2\xc8\x79\xd2\x33\xf9\x5f\x11\x3d\x14\xe2\x5e\xb9\x36\x54\xfb\xee\x47\x1e\xa3\x4f\xdb\x04\x58\xe3\xbc\x0f\xe6\x75\x7c\x5e\xc1\x8c\x50\x62\x27\x95\x8b\xe6\xfe\xce\xaa\x3d\x4e\xff\xd6\xd9\xfc\xbf\xb0\x35\x14\x2f\xc2\x65\xae\xea\xc6\xf1\x08\x78\x46\x6c\xf4\x7b\x10\x32\x44\x11\xa4\x65\xc4\xf7\x0a\x14\xfc\xe0\xa9\x43\x2b\xfd\x84\x68\x02\xb7\x20\x04\x4a\xe0\x2f\x22\x48\x44\x52\xed\x6c\x0f\x24\x6b\xa5\x25\x30\x6f\xbb\x4e\x48\x06\x4c\x39\x64\xc0\x1e\x54\x66\xa2\x6a\x05\xad\x5d\x4a\xdc\x20\x92\x42\xec\x3a\x9f\x18\xa5\xed\x6a\x70\xa5\x5f\x0f\x99\x24\x0a\x0a\xdf\x8d\xb3\x66\x55\x1f\xc5\x47\x16\xb4\xb7\x8f\xdc\xd9\xe9\x83\x34\xc2\x1b\x5e\xfd\x7d\xec\x6c\x80\x70\x06\xae\xb5\xfa\x22\xae\x3a\x8d\xcd\xc2\xdd\x2f\x0a\xbc\xfb\x38\xee\x62\xd3\x30\x0f\xe2\x96\x86\xb9\xfb\x43\x0f\x2e\x57\x80\xe2\x21\x48\x09\x7c\xcc\x14\xc7\x36\x0c\x7e\xa7\x5f\x56\xdb\x38\xb8\x45\xe3\x6f\x89\x57\x7b\x65\xc4\x61\x46\x16\x6d\x67\xab\x37\xdc\x47\x1d\xad\x5e\xb4\x1a\xdf\xd1\x8a\x27\xa7\x48\xf3\x07\xc0\x40\xe6\x6d\x0a\xee\x3a\x37\xed\xac\x5a\xca\x9a\x5b\xb4\xf8\xae\xb2\x08\xf8\xdd\xac\xd0\xb1\x2b\x62\x9f\xd7\xef\xe3\x7e\x4a\x97\x04\x1e\x11\x91\x7a\xc9\xf6\x55\x2e\x6d\x74\x6d\xe4\xac\x8d\x38\x6a\xe0\x64\x56\x8b\x5f\xe8\x3c\x40\xc6\xe6\xd0\xae\x3d\x73\x0f\xa0\x31\xd0\xb8\x45\xf4\x5c\x41\x8a\x96\x2b\xdf\xb8\xb4\x83\x17\x55\x1a\x5c\x5c\xb6\xf7\x20\x33\x42\xef\x75\x25\xbd\xf2\x1c\x5a\x69\x3b\xc2\xf5\x74\x61\xd0\xc0\xa1\x5d\xd8\xf0\xce\x51\x3b\x1c\x07\x37\x5c\x53\xc9\xc9\xb9\x24\x8e\x47\xe6\x17\x1d\xda\x51\xe1\xcf\x8c\x8e\x4a\xf4\xe5\xd1\x5c\x61\x0c\x42\xcc\x54\xb9\xc9\x79\x67\x44\x62\xad\xc7\xaf\x18\x8d\x4f\xd6\x46\x3a\x84\xe0\x69\x4a\x80\x7b\xea\x77\xca\x7f\x6d\xcf\xe2\x29\xca\xa2\x18\xb9\x8c\xe3\x03\x3a\x67\xcf\x5e\xf5\xf7\x46\x51\x73\x11\x52\xd5\xf1\xea\x5d\xb1\x51\x37\x59\xe6\xbb\x97\x63\x2c\xa9\x7a\x7c\xaf\x50\x4a\x66\x04\x78\xdb\x81\xa8\x00\x76\xcd\x39\xe3\x3b\x17\x53\x12\x49\x25\x7a\x2c\x76\x98\x28\x2d\x37\x5d\xb1\xa4\xb8\x35\x41\xed\x4c\xb2\xa8\x0f\xba\x8d\xf9\xc3\xc5\xfb\x76\x6e\xff\xa6\xf0\x33\x48\xaf\xef\xb5\x95\xaf\x9a\x95\x39\x4a\x4d\x07\xda\x1c\xf5\x91\xd9\xc3\x84\xfc\xa1\x35\xc2\xce\xb4\x1f\x17\x7f\x1f\xe4\x5d\xf4\x13\xf0\x5e\xf0\x75\x41\xf1\x27\x2c\x5b\x56\xb5\xb3\xf0\xde\xd7\x20\xe0\xf0\x9c\x2f\x2e\x99\x10\x7f\x2e\x55\xc4\x46\x2e\xf7\x1e\x94\x67\xcd\x45\x2d\x38\x6b\xde\x91\x7b\xa8\xd8\x2a\x99\x32\xc3\xa2\x5f\xd7\x32\x24\x42\x5a\x26\x2b\xbc\xe0\x62\x69\xf5\xcb\xef\x6c\x69\xe1\x27\x6f\x0b\x3f\x6d\x9c\xf5\x18\x95\xe6\x9b\xd9\x51\xe9\x6f\x13\x60\x23\xf5\x95\x8f\x8c\x91\x2a\xb2\x6b\xc8\x92\x84\xd0\xe4\xcc\x23\xb0\xde\x86\x11\x4b\x09\xf6\xfa\xf2\x54\xbc\xf9\x39\x5c\x39\x41\x1f\xcb\x95\xd5\xfd\x36\x75\xfa\xfa\x39\x52\x51\x4a\x84\xd7\x65\xca\x84\xe5\x04\x77\x39\x75\x9a\x02\x3a\xfa\xdf\x6b\xe7\xbf\x00\x00\x00\xff\xff\x94\xaf\x2f\x04\x08\x2b\x00\x00")

func resourcesAwswhitelistJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAwswhitelistJson,
		"resources/AWSWhitelist.json",
	)
}

func resourcesAwswhitelistJson() (*asset, error) {
	bytes, err := resourcesAwswhitelistJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/AWSWhitelist.json", size: 11016, mode: os.FileMode(420), modTime: time.Unix(1562887628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesDefaultsamplingrulesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\x4b\x2d\x2a\xce\xcc\xcf\x53\xb2\x52\x30\xd2\x01\xf1\x53\x52\xd3\x12\x4b\x73\x4a\x94\xac\x14\x40\xd2\x0a\x0a\x4a\x69\x99\x15\xa9\x29\xf1\x25\x89\x45\xe9\xa9\x20\x51\x43\x1d\x88\x70\x51\x62\x49\xaa\x92\x95\x82\x81\x9e\x81\x29\x97\x82\x42\x2d\x58\x6f\x51\x69\x4e\x6a\xb1\x92\x95\x42\x34\x97\x82\x42\x2c\x57\x2d\x17\x20\x00\x00\xff\xff\x47\xbd\xc4\xe0\x61\x00\x00\x00")

func resourcesDefaultsamplingrulesJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefaultsamplingrulesJson,
		"resources/DefaultSamplingRules.json",
	)
}

func resourcesDefaultsamplingrulesJson() (*asset, error) {
	bytes, err := resourcesDefaultsamplingrulesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/DefaultSamplingRules.json", size: 97, mode: os.FileMode(420), modTime: time.Unix(1562887430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesExamplesamplingrulesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\xae\xd3\x30\x14\x84\xf7\x79\x8a\x91\x37\x17\xae\x72\x43\x8b\xc4\x26\x3b\x16\xbc\x00\x62\x87\x50\x74\x1a\x9f\xd4\x47\x38\x76\xea\x9f\xb6\x08\xf5\xdd\x91\x9d\x96\xd2\xb2\xcc\xcc\x38\x67\xbe\xf9\xdd\x00\xea\xc8\x21\x8a\x77\xaa\xc7\xc7\xb6\x7c\x6b\x9e\x28\xdb\xa4\x7a\x14\xbb\x0a\x71\x0c\xb2\xa4\x35\xa4\x3e\xe3\x9a\x40\xc8\x96\x5b\x50\x84\xb8\xd1\x66\xcd\x1a\x3b\xb6\xfe\xd4\x42\x22\x02\x1f\xb2\x04\xd6\x10\x07\x72\xbf\x10\x69\x5e\xac\xb8\x7d\x7d\x14\x31\x89\xe5\x0e\xef\x22\x87\xa3\x8c\x3c\x38\x9a\xb9\x85\x49\x69\x19\x66\x4e\xc6\xeb\x16\xe4\x34\x72\xb0\xc3\x42\xc9\x80\x02\x63\x92\x33\x6b\x24\x8f\x97\xd7\x17\x4c\x3e\x20\x99\x72\x27\x5b\xee\xde\xab\x76\xad\x5a\x33\x43\xa2\xb0\xe7\x02\xb0\xbd\xca\x81\x12\xab\x1e\x9b\x6e\xf3\xa9\x01\x2e\x15\xb3\xf6\x50\x3d\xbe\xd7\xc8\x8a\xfa\x3f\xec\x97\x73\xe9\xcd\x28\x2d\xde\x76\x14\x59\xd7\x8b\x2b\x68\x87\xaf\x15\xa6\xb4\xe3\x23\xd9\x4c\x69\x05\x16\xfd\xe6\x83\xe6\xd0\x22\x19\x7e\x98\x0b\x27\xb1\x16\x3b\x46\x2e\xbf\x92\x09\xce\x3b\xc6\x4c\x69\x34\x35\x2b\x6e\xf4\x73\x9d\x89\x0f\x99\x63\xea\xf0\xad\x50\x4a\x04\xad\xef\x57\x70\xc6\x68\x78\xfc\xe9\x73\xc2\x42\x7b\xee\xae\xfc\x80\x12\x5d\x6a\x6f\xef\x82\xf1\xb1\x4c\xa1\x5e\xff\x91\xee\x3b\x3f\x39\xb7\xc1\x8b\xfc\xe1\x76\xe2\x6e\x3f\xcf\xbb\xf9\xeb\x3c\x2e\x0c\x5c\x1a\xe0\x47\x73\xf9\x13\x00\x00\xff\xff\x8e\x14\x8f\x3e\x61\x02\x00\x00")

func resourcesExamplesamplingrulesJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesExamplesamplingrulesJson,
		"resources/ExampleSamplingRules.json",
	)
}

func resourcesExamplesamplingrulesJson() (*asset, error) {
	bytes, err := resourcesExamplesamplingrulesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/ExampleSamplingRules.json", size: 609, mode: os.FileMode(420), modTime: time.Unix(1562887430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/AWSWhitelist.json": resourcesAwswhitelistJson,
	"resources/DefaultSamplingRules.json": resourcesDefaultsamplingrulesJson,
	"resources/ExampleSamplingRules.json": resourcesExamplesamplingrulesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"AWSWhitelist.json": &bintree{resourcesAwswhitelistJson, map[string]*bintree{}},
		"DefaultSamplingRules.json": &bintree{resourcesDefaultsamplingrulesJson, map[string]*bintree{}},
		"ExampleSamplingRules.json": &bintree{resourcesExamplesamplingrulesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

